{
    "scrape_url": "https://scrape.pastebin.com/api_scrape_item.php?i=BnkFtbcU",
    "full_url": "https://pastebin.com/BnkFtbcU",
    "date": "1594639552",
    "key": "BnkFtbcU",
    "size": 2699,
    "expire": "1595244352",
    "title": "",
    "syntax": "python",
    "user": "",
    "filename": "BnkFtbcU",
    "pasteid": "BnkFtbcU",
    "pastesite": "pastebin.com",
    "@timestamp": "2020-07-13T11:25:52",
    "MD5": "a7333844f80f285bd3732f3d97dc6481",
    "SHA256": "5e222c0ad1c285b78dbd4dd2304d20a721638948ebb7ea4ac964352ccd1baaa7",
    "raw_paste": "import json\r\n\r\nfrom datetime import datetime\r\n\r\nfrom flask import Flask, request, abort\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom sqlalchemy import inspect, create_engine\r\n\r\nclass Config:\r\n    SQLALCHEMY_DATABASE_URI = 'postgresql://dwh_api_travelpayouts::@167.71.37.33/bi'\r\n    AUTH_TOKEN = 'TEST1'\r\n\r\ndb = SQLAlchemy()\r\n\r\nclass Travelpayouts(db.Model):\r\n    __schema__='dwh_api'\r\n    __table_args__ = {'schema' : 'dwh_api'}\r\n    d_active_from = db.Column(db.DateTime)\r\n    id_transfer =  db.Column(db.Numeric, primary_key=True)\r\n    n_transfer = db.Column(db.Numeric)\r\n    order_number = db.Column(db.Text)\r\n    price = db.Column(db.Text)\r\n    profit = db.Column(db.Text)\r\n    currency = db.Column(db.Text)\r\n    transfer_date_to = db.Column(db.Text)\r\n    transfer_date_return = db.Column(db.Text)\r\n    transfer_point_from = db.Column(db.Text)\r\n    sub_id = db.Column(db.Text)\r\n    status = db.Column(db.Text)\r\n    updated_at = db.Column(db.Text)\r\n    cpa_info = db.Column(db.Text)\r\n\r\n\r\nconfig = Config()\r\napp = Flask(__name__)\r\napp.config.from_object(config)\r\ndb.init_app(app)\r\n\r\n@app.route('/travelpayouts')\r\ndef travelpayouts():\r\n    if request.headers.get('X-Access-Key') != config.AUTH_TOKEN:\r\n        abort(401)\r\n    REQ_DATE_PATTERN = '%Y-%m-%d'\r\n    DB_DATE_PATTERN = '%Y-%m-%dT%H:%M:%S'\r\n    from_str, to_str = request.args.get(\"from\"), request.args.get(\"to\")\r\n    from_date, to_date = None, None\r\n    try:\r\n        from_date, to_date = datetime.strptime(from_str, REQ_DATE_PATTERN), datetime.strptime(to_str, REQ_DATE_PATTERN)\r\n    except TypeError:\r\n        abort(500)\r\n    except ValueError:\r\n        abort(400)\r\n    filtered, res = [], []\r\n    query_result = Travelpayouts.query.all()\r\n    for r in query_result:\r\n        updated_at = datetime.strptime(r.updated_at, DB_DATE_PATTERN)\r\n        if from_date is not None and to_date is not None:\r\n            if from_date <= updated_at <= to_date:\r\n                filtered.append(r)\r\n        elif from_date is None and to_date is not None:\r\n            if updated_at <= to_date:\r\n                filtered.append(r)\r\n        elif from_date is not None and to_date is None:\r\n            if from_date <= updated_at:\r\n                filtered.append(r)\r\n        elif from_date is not None and to_date is not None:\r\n                filtered.append(r)\r\n    for f in filtered:\r\n        res.append({'order_number': f.order_number, 'price': f.price, 'profit': f.profit, 'currency': f.currency, 'description': {'transfer_date_to': f.transfer_date_to, 'transfer_date_return': f.transfer_date_return, 'transfer_point_from': f.transfer_point_from}, 'sub_id': f.sub_id, 'status': f.status, 'updated_at': f.updated_at})\r\n    return json.dumps(res)",
    "YaraRule": [
        "db_connection"
    ]
}