{
    "scrape_url": "https://scrape.pastebin.com/api_scrape_item.php?i=e8eftw0R",
    "full_url": "https://pastebin.com/e8eftw0R",
    "date": "1594475113",
    "key": "e8eftw0R",
    "size": 4772,
    "expire": "1594475713",
    "title": "",
    "syntax": "python",
    "user": "",
    "filename": "e8eftw0R",
    "pasteid": "e8eftw0R",
    "pastesite": "pastebin.com",
    "@timestamp": "2020-07-11T13:45:13",
    "MD5": "74d7adadd58c38ba5184f0d16459a7ff",
    "SHA256": "2ef0954ba88deed12da21bf359bfbaadb23957d08269664a738cf362d8cd3ba7",
    "raw_paste": "\r\nimport asyncio, requests, time\r\nfrom time import sleep\r\nfrom threading import Thread\r\nfrom bs4 import BeautifulSoup\r\nfrom discord_webhook import DiscordWebhook, DiscordEmbed\r\nfrom retrying import retry\r\nimport random\r\nfrom fake_useragent import UserAgent\r\nWEBHOOK = \"https://discordapp.com/api/webhooks/730535397209407649/5DHVnWIBzJuqX3EXORpTFtE-13IrK3UVC9VdujDAK6xIq3qfgSY3UPBqPpakV1KG7QFv\"\r\nERROR = \"https://discordapp.com/api/webhooks/729836943340470345/tcz_FHtpPyvxWOCN1h8HKafKpVNDsGUBzAonIpgub_jEzXSf8_tCSzUhlJlFtLtxRtSE\"\r\nSPAM_DELAY = 120\r\nua=UserAgent(cache=False)\r\n\r\n\r\nasync def threads():\r\n    Thread(target=monitor,args=(\"https://amzn.to/2BHyW5J\" ,\"140\",)).start()#piscina rettangolare no filtro\r\n    Thread(target=monitor,args=(\"https://amzn.to/3gJKKmN\" ,\"140\",)).start()#piscina rotonda filtro grande\r\n    Thread(target=monitor,args=(\"https://amzn.to/2ZbOHuA\" ,\"140\",)).start()#piscina rotonda no filtro grande\r\n    Thread(target=monitor,args=(\"https://amzn.to/2AFBwsb\" ,\"140\",)).start()#piscina rotonda filtro piccola\r\n    Thread(target=monitor,args=(\"https://amzn.to/2W0F1kn\" ,\"140\",)).start()#piscina rotonda no filtro piccola\r\n    Thread(target=monitor,args=(\"https://amzn.to/3edvnRU\" ,\"140\",)).start()#piscina rettangfolare bestway\r\n    Thread(target=monitor,args=(\"https://amzn.to/31WJcl1\" ,\"115\",)).start()#piscina rotonda intex molla\r\n    Thread(target=monitor,args=(\"https://amzn.to/2ZM1wuy\" ,\"250\",)).start()#\r\n    Thread(target=monitor,args=(\"https://amzn.to/322fJGr\" ,\"290\",)).start()#\r\n    Thread(target=monitor,args=(\"https://amzn.to/3iG1WLE\" ,\"140\",)).start()#\r\n    Thread(target=monitor,args=(\"https://amzn.to/3iH8z0d\" ,\"200\",)).start()#\r\n    Thread(target=monitor,args=(\"https://amzn.to/2ZcR5kt\" ,\"120\",)).start()#\r\n    Thread(target=monitor,args=(\"https://amzn.to/3ehMqCc\" ,\"140\",)).start()#\r\n\r\n@retry\r\ndef monitor(url,check,i=0,k=0):\r\n    print(\"ERRORE\")\r\n    sleep(0.1)\r\n    while True:\r\n        uaa=ua.random\r\n        i=0\r\n        \r\n        proxies = {'https':'http://SelTommasoboriassi:P0h2WqA@91.201.65.156:45785'}\r\n        r = requests.get(   url+\"?\"+str(random.randint(1,10000)), \r\n                            headers={'User-Agent':uaa},proxies = proxies )\r\n        soup = BeautifulSoup(r.content, 'lxml')\r\n        \r\n        #controllo errori\r\n        STATUS_CODE = r.status_code\r\n        print(soup.title.text,\"***\",STATUS_CODE)\r\n        #if r.status_code != 200:\r\n           #print(\"200 no\")\r\n           #errore(STATUS_CODE)\r\n           #sleep(500)\r\n        #scraping dati\r\n        tt = soup.find(\"h1\",class_ = \"a-size-large a-spacing-none\").text\r\n        price = soup.find_all(\"span\",class_ = \"a-size-large a-color-price olpOfferPrice a-text-bold\")\r\n        img = soup.find(\"img\",alt=\"Torna alla pagina prodotto\")\r\n        img=(img['src'])\r\n        #Per evitare lo spam di notifiche       \r\n\r\n        #controllo prezzi\r\n        str(check)\r\n          \r\n        for element in soup.find_all(\"span\",class_ = \"a-size-large a-color-price olpOfferPrice a-text-bold\"):\r\n            #print(price[i].text)\r\n            \r\n            \r\n            costo=price[i].text.replace(\"                EUR \",\"\")\r\n            costo=costo.split(\",\", 1)\r\n            costo = costo[0]\r\n           # print (time.strftime(\"%H:%M:%S\"),\"aaaaaaaaaaaaaa\")\r\n            if (costo) < check:\r\n                pricee=price[i].text\r\n                send_webhook(url, tt,img,pricee)\r\n                print (time.strftime(\"%H:%M:%S\"),\"RESTOCK\",tt,price[i].text)\r\n                sleep(1)\r\n            i=i+1\r\n\r\n            \r\n        \r\n        \r\n        sleep(0.1)\r\n\r\ndef send_webhook(url,tt,img,pricee):\r\n    webhook = DiscordWebhook(url=WEBHOOK, username=\"AMAZON Monitor\")\r\n    embed = DiscordEmbed(title=tt,  color=14424279,url=url)\r\n    embed.set_footer(text='Powered by @GhostCopEU',icon_url=\"https://cdn.discordapp.com/attachments/694487965270802514/694552750377271446/logo_ghostcopeu_png.png\")\r\n    embed.set_image(url=img)\r\n    embed.add_embed_field(name='**Price**', value=pricee)\r\n    embed.set_timestamp()\r\n    webhook.add_embed(embed)\r\n    response = webhook.execute()\r\n\r\ndef errore(STATUS_CODE):\r\n    webhook = DiscordWebhook(url=ERROR, username=\"AMAZON ERRORE!!!\")\r\n    embed = DiscordEmbed(title=\"STATUS CODE DIVERSO DA 200\",  color=14424279)\r\n    embed.set_footer(text='Powered by @GhostCopEU',icon_url=\"https://cdn.discordapp.com/attachments/694487965270802514/694552750377271446/logo_ghostcopeu_png.png\")\r\n    embed.add_embed_field(name='**STATUS CODE**', value=STATUS_CODE)\r\n    embed.set_timestamp()\r\n    webhook.add_embed(embed)\r\n    response = webhook.execute()\r\n \r\n\r\nasync def main():\r\n    print((time.strftime(\"%H:%M:%S\"),\"[AMAZON] Monitor startato\"))\r\n    asyncio.create_task(threads())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())",
    "YaraRule": [
        "db_connection",
        "discord_api"
    ]
}